{"pageProps":{"quiz":{"folder":"rust","path":"data/rust/rust-quiz.md","questions":[{"text":"#### Q1. Which type cast preserves the mathematical value in all cases?\n\n- %OPTION% i64 as i32\n- %OPTION% usize as u64\n- %OPTION% i32 as i64\n- %OPTION% f64 as f32\n\n","options":3,"answer":2},{"text":"#### Q2. What do the vertical bars represent here?\n\n```rust\nstr::thread::spawn(|| {\n    println!(\"LinkedIn\");\n});\n```\n\n- %OPTION% a closure\n- %OPTION% a thread\n- %OPTION% a future\n- %OPTION% a block\n\n[reference](https://doc.rust-lang.org/book/ch13-01-closures.html#refactoring-with-closures-to-store-code)\n\n","options":3,"answer":0},{"text":"#### Q3. Which choice is not a scalar data type?\n\n- %OPTION% integer\n- %OPTION% float\n- %OPTION% boolean\n- %OPTION% tuple\n\n","options":3,"answer":3},{"text":"#### Q4. **\\_** cannot be destructured.\n\n- %OPTION% Traits\n- %OPTION% Tuples\n- %OPTION% Enums\n- %OPTION% Structs\n\n[reference](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html)\n\n","options":3,"answer":0},{"text":"#### Q5. Which `cargo` command checks a program for error without creating a binary executable?\n\n- %OPTION% cargo --version\n- %OPTION% cargo init\n- %OPTION% cargo build\n- %OPTION% cargo check\n\n","options":3,"answer":3},{"text":"#### Q6. The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?\n\n- %OPTION% It's creating a pointer on the heap that points to a value on the stack.\n- %OPTION% It's creating a pointer on the stack that points to a value on the heap.\n- %OPTION% It's creating a memory guard around values to prevent illegal access.\n- %OPTION% It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled.\n\n","options":3,"answer":1},{"text":"#### Q7. What is an alternative way of writing `slice` that produces the same result?\n\n```rust\n...\nlet s = String::form(\"hello\");\nlet slice = &s[0..2];\n```\n\n- %OPTION% let slice = &s[len + 2];\n- %OPTION% let slice = &s[len - 2];\n- %OPTION% let slice = &s.copy(0..2);\n- %OPTION% let slice = &s[..2];\n\n","options":3,"answer":3},{"text":"#### Q8. Using the `?` operator at the end of an expression is equivalent to **\\_**.\n\n- %OPTION% a match pattern that branches into True or False\n- %OPTION% calling ok_error()\n- %OPTION% calling panic!()\n- %OPTION% a match pattern that may result an early return\n\n","options":3,"answer":3},{"text":"#### Q9. Which is valid syntax for defining an array of i32 values?\n\n- %OPTION% Array<i32>::with_capacity(10)\n- %OPTION% [i32]\n- %OPTION% Array<i32>::new(10)\n- %OPTION% [i32; 10]\n\n","options":3,"answer":3},{"text":"#### Q10. What syntax is required to take a mutable reference to T, when used within a function argument?\n\n```rust\nfn increment(i: T) {\n    // body elided\n}\n```\n\n- %OPTION% \\*mut T\n- %OPTION% mut ref T\n- %OPTION% mut &T\n- %OPTION% &mut T\n\n","options":3,"answer":3},{"text":"#### Q11. The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?\n\n- %OPTION% .add()\n- %OPTION% .incr()\n- %OPTION% .clone()\n- %OPTION% .increment()\n\n[reference](https://doc.rust-lang.org/book/ch15-04-rc.html)\n\n","options":3,"answer":2},{"text":"#### Q12. What happens when an error occurs that is being handled by the question mark (?) operator?\n\n- %OPTION% The error is reported and execution continues.\n- %OPTION% An exception is raised. The effect(s) of the exception are defined by the error! macro.\n- %OPTION% The program panics immediately.\n- %OPTION% Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics.\n\n","options":3,"answer":3},{"text":"#### Q13. Which comment syntax is not legal?\n\n- %OPTION% `/*`\n- %OPTION% `#`\n- %OPTION% `//!`\n- %OPTION% `//`\n\n","options":3,"answer":1},{"text":"#### Q14. In matching patterns, values are ignored with \\_.\n\n- %OPTION% `.ignore()`\n- %OPTION% `an underscore (_)`\n- %OPTION% ..\n- %OPTION% skip\n\n","options":3,"answer":2},{"text":"#### Q15. Defining a \\_ requires a lifetime parameter.\n\n- %OPTION% function that ends the lifetime of one of its arguments\n- %OPTION% struct that contains a reference to a value\n- %OPTION% function with a generic argument\n- %OPTION% struct that contains a reference to a boxed value\n\n[Rust book reference](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotations-in-struct-definitions)\n\n","options":3,"answer":1},{"text":"#### Q16. Which example correctly uses std::collections::HashMap's Entry API to populate counts?\n\n```rust\nuse std::collections::HashMap;\nfn main() {\n    let mut counts = HashMap::new();\n    let text = \"LinkedIn Learning\";\n    for c in text.chars() {\n        // Complete this block\n    }\n    println!(\"{:?}\", counts);\n}\n```\n\n- %OPTION%\n\n```rust\nfor c in text.chars() {\n    if let Some(count) = &mut counts.get(&c) {\n        counts.insert(c, *count + 1);\n    } else {\n        counts.insert(c, 1);\n    };\n}\n```\n\n- %OPTION%\n\n```rust\nfor c in text.chars() {\n    let count = counts.entry(c).or_insert(0);\n    *count += 1;\n}\n```\n\n- %OPTION%\n\n```rust\nfor c in text.chars() {\n    let count = counts.entry(c);\n    *count += 1;\n}\n```\n\n- %OPTION%\n\n```rust\nfor c in text.chars() {\n    counts.entry(c).or_insert(0).map(|x| x + 1);\n}\n```\n\n[reference](https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry)\n\n","options":3,"answer":1},{"text":"#### Q17. Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?\n\n```rust\nuse std::collections::HashMap;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let mut v = Vec::<u8>::new();\n\n    let a = \"LinkedIn\";\n    let b = 123;\n    let c = 'ðŸ§€';\n\n    // replace this line\n\n    println!(\"{:?}\", v);\n\n    Ok(())\n}\n```\n\n- %OPTION%\n\n```rust\nwrite!(&mut v, \"{}{}{}\", a, b, c)?;\n```\n\n- %OPTION%\n\n```rust\nv.write(a)?;\nv.write(b)?;\nv.write(c)?;\n```\n\n- %OPTION%\n\n```rust\nv.write(a, b, c)?;\n```\n\n- %OPTION%\n\n```rust\nv.write_all(a.as_bytes())?;\nv.write_all(&b.to_string().as_bytes())?;\nc.encode_utf8(&mut v);\n```\n\n1. [Answered in rust user forum](https://users.rust-lang.org/t/formatting-and-writing-to-a-file-without-malloc-or-locks/52295/9)\n2. [reference](https://doc.rust-lang.org/std/macro.write.html)\n\n","options":3,"answer":0},{"text":"#### Q18. Does the `main` function compile? If so, why? If not, what do you need to change?\n\n```rust\nfn main() {\n    let Some(x) = some_option_value;\n}\n```\n\n- %OPTION% The code does not compile. `let` statements require a refutable pattern. Add `if` before `let`.\n- %OPTION% The code compiles. `let` statements sometimes require a refutable pattern.\n- %OPTION% The code does not compile. `let` statements requires an irrefutable pattern. Add `if` before `let`.\n- %OPTION% The code compiles. `let` do not require a refutable pattern.\n\n","options":3,"answer":2},{"text":"#### Q19. Which statement about lifetimes is false?\n\n- %OPTION% Lifetimes were redundantly specified in previous version of Rust.\n- %OPTION% Lifetimes are specified when a struct is holding a reference to a value.\n- %OPTION% Lifetimes are specified when certain values must outlive others.\n- %OPTION% Lifetimes are always inferred by the compiler.\n\n","options":3,"answer":3},{"text":"#### Q20. When used as a return type, which Rust type plays a similar role to Python's `None`, JavaScript's `null`, or the `void` type in C/C++?\n\n- %OPTION% `!`\n- %OPTION% `None`\n- %OPTION% `Null`\n- %OPTION% `()`\n\n","options":3,"answer":3},{"text":"#### Q21. To convert a `Result` to an `Option`, which method should you use?\n\n- %OPTION% `.as_option()`\n- %OPTION% `.ok()`\n- %OPTION% `.to_option()`\n- %OPTION% `.into()`\n\n","options":3,"answer":1},{"text":"#### Q22. Which statement about the `Clone` and `Copy` traits is false?\n\n- %OPTION% `Copy` is enabled for primitive, built-in types.\n- %OPTION% Without `Copy`, Rust applies move semantics to a type's access.\n- %OPTION% When using `Clone`, copying data is explicit.\n- %OPTION% Until a type implements either `Copy` or `Clone`, its internal data cannot be copied.\n\n[ref from stack overflow](https://stackoverflow.com/questions/41413336/do-all-primitive-types-implement-the-copy-trait)\n\n","options":3,"answer":0},{"text":"#### Q23. Why does this code _not_ compile?\n\n```rust\nfn returns_closure() -> dyn Fn(i32) -> i32 {\n    |x| x + 1\n}\n```\n\n- %OPTION% The returned `fn` pointer and value need to be represented by another trait.\n- %OPTION% Closures are types, so they cannot be returned directly from a function.\n- %OPTION% Closures are types and can be returned only if the concrete trait is implemented.\n- %OPTION% Closures are represented by traits, so they cannot be a return type.\n\n[Rust book reference](https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html#returning-closures)\n\n","options":3,"answer":3},{"text":"#### Q24. What smart pointer is used to allow multiple ownership of a value in various threads?\n\n- %OPTION% `Arc<T>`\n- %OPTION% `Box<T>`\n- %OPTION% Both `Arc<T>` and `Rc<T>` are multithread safe.\n- %OPTION% `Rc<T>`\n\n[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html?highlight=arc%3CT%3E#atomic-reference-counting-with-arct)\n\n","options":3,"answer":0},{"text":"#### Q25. Which types are _not_ allowed within an enum variant's body?\n\n- %OPTION% zero-sized types\n- %OPTION% structs\n- %OPTION% trait objects\n- %OPTION% floating-point numbers\n\n[Reference](https://doc.rust-lang.org/reference/types/trait-object.html)\n\n","options":3,"answer":2},{"text":"#### Q26. Which statement about this code is true?\n\n```rust\nfn main() {\n    let c = 'z';\n    let heart_eyed_cat = 'ðŸ˜»';\n}\n```\n\n- %OPTION% Both are character literals.\n- %OPTION% `heart_eyed_cat` is an invalid expression.\n- %OPTION% `c` is a string literal and `heart_eyed_cat` is a character literal.\n- %OPTION% Both are string literals.\n\n[Reference](https://doc.rust-lang.org/std/primitive.char.html)\n\n","options":3,"answer":0},{"text":"#### Q27. Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?\n\n- %OPTION% `Mutex<Arc<T>>`\n- %OPTION% `Rc<Mutex<T>>`\n- %OPTION% `Arc<Mutex<T>>`\n- %OPTION% `Mutex<Rc<T>>`\n\n[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html#atomic-reference-counting-with-arct)\n\n","options":3,"answer":2},{"text":"#### Q28. Which idiom can be used to concatenate the strings `a`, `b`, `c`?\n\n```rust\nlet a = \"a\".to_string();\nlet b = \"b\".to_string();\nlet c = \"c\".to_string();\n```\n\n- %OPTION% `String::from(a,b,c)`\n- %OPTION% `format!(\"{}{}{}\", a, b, c)`\n- %OPTION% `concat(a,b,c)`\n- %OPTION% `a + b + c`\n\n","options":3,"answer":1},{"text":"#### Q29. In this function. what level of access is provided to the variable `a`?\n\n```rust\nuse std::fmt::Debug;\n\nfn report<T:Debug>(a: &T) {\n    eprintln!(\"info: {:?}\", a);\n}\n```\n\n- %OPTION% print\n- %OPTION% read-only\n- %OPTION% read/write\n- %OPTION% debug\n\n","options":3,"answer":1},{"text":"#### Q30. Which choice is _not_ valid loop syntax?\n\n- %OPTION% `loop`\n- %OPTION% `for`\n- %OPTION% `while`\n- %OPTION% `do`\n\n","options":3,"answer":3},{"text":"#### Q31. How do you construct a value of `Status` that is initialized to `Waiting`?\n\n```rust\nenum Status {\n    Waiting,\n    Busy,\n    Error(String),\n}\n```\n\n- %OPTION% `let s = Enum::new(Status::Waiting);`\n- %OPTION% `let s = new Status::Waiting;`\n- %OPTION% `let s = Status::Waiting;`\n- %OPTION% `let s = Status::new(Waiting);`\n\n","options":3,"answer":2},{"text":"#### Q32. Which statement about enums is false?\n\n- %OPTION% Enums are useful in matching patterns.\n- %OPTION% Option is an enum type.\n- %OPTION% Enum variants can have different types with associated data.\n- %OPTION% the term _enum_ is short for _enummap_\n\n","options":3,"answer":3},{"text":"#### Q33. What does an underscore (\\_) indicate when used as pattern?\n\n- %OPTION% It matches everything.\n- %OPTION% It matches underscores.\n- %OPTION% It matches any value that has a length of 1.\n- %OPTION% It matches nothing.\n\n","options":3,"answer":0},{"text":"#### Q34. What is a safe operation on a `std::cell:UnsafeCell<T>`?\n\n- %OPTION% A `&mut T` reference is allowed. However it may not cpexists with any other references. and may be created only in single-threaded code.\n- %OPTION% `UnsafeCell<T>` provides thread-safety. Therefore, creating `&T` references from multiple threads is safe.\n- %OPTION% The only safe operation is the `.get()` method, which returns only a raw pointer.\n- %OPTION% Non. `UnsafeCell<T>` only allows code that would otherwise need unsafe blocks to be written in safe code.\n\n[Reference](https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html)\n\n","options":3,"answer":2},{"text":"#### Q35. Generics are useful when you **\\_**.\n\n- %OPTION% need to reduce code duplication by concretizing values and restricting parameters in functions\n- %OPTION% need to reduce code duplication by abstracting values further, such as in function parameters\n- %OPTION% need a supertrait\n- %OPTION% are not sure if you need a specific kind of trait\n\n","options":3,"answer":1},{"text":"#### Q36. How do you create a Rust project on the command-line?\n\n- %OPTION% cargo new\n- %OPTION% rustup init\n- %OPTION% cargo start\n- %OPTION% rust new-project\n\n","options":3,"answer":0}],"title":"## Rust (Programming Language)"},"lang":"en","availableLanguages":[{"isSelected":true,"name":"English","key":"en"}],"dictionary":{"en":{"CHEER":"ALRIGHT! LET'S GOOO!","TITLE":"Skill Assessments Quizzes","DESC":"Collection of questions and answers on different subjects aimed to help\nyou test your knowledge before an important job interview!\n\nData from __data__. UI by __bandinopla__\n","FILTER_BY_NAME":"Filter by name","BACK_TO_HOME":"back to home","SCORE":"Score","X_CORRECT":"__X__ correct","X_INCORRECT":"__X__ incorrect","X_UNANSWERED":"__X__ unanswered","BUTTON_RESET":"Reset","BUTTON_PREVIOUS":"Prev","BUTTON_NEXT":"Next","SOURCE_CODE":"Source Code","QUIZ":"Quiz","QUIZ_AVAILABLE_IN":"Quiz available in","QUIZ_ONLY_AVAILABLE_IN":"Quiz only available in","LANG_NAME":"English"},"es":{"CHEER":"TODO LISTO! VAMOS!!","TITLE":"Questionarios de evaluaciÃ³n de habilidades","DESC":"ColecciÃ³n de preguntas y respuestas sobre diferentes temas orientadas a\nayudarte a testear tu conocimiento antes de una importante entrevista de trabajo! \n\nDatos de __data__. UI por __bandinopla__\n","FILTER_BY_NAME":"Filtrar por nombre","BACK_TO_HOME":"Volver al inicio","SCORE":"Puntaje","X_CORRECT":"__X__ correctas","X_INCORRECT":"__X__ incorrectas","X_UNANSWERED":"__X__ sin responder","BUTTON_RESET":"Reiniciar","BUTTON_PREVIOUS":"AtrÃ¡s","BUTTON_NEXT":"Siguente","SOURCE_CODE":"CÃ³digo fuente","QUIZ":"Questionario","QUIZ_AVAILABLE_IN":"Questionario disponible en","QUIZ_ONLY_AVAILABLE_IN":"Questionario solo disponible en","LANG_NAME":"EspaÃ±ol"}}},"__N_SSG":true}